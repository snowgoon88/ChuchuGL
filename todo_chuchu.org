* _Current_ : working on texture, for [[line_boxing]], for Tron
* _Current_ : working on [[planet]]
* Current => matrix2020 : "FOV mais..." ou gl_text info cursor
TODO gl_overlay pour écrire le texte de ce qui est sous le curseur
* TODO [5/7] GN2020
** TODO [2/6] Autre agent
*** DONE avec orientation
*** TODO FOV mais dans seulement 2/X direction (ex devant+droite)
*** TODO Affichage textuel avec flèches ?
*** DONE déplacement automatique => règles
*** TODO tir/action si assez près ou ligne de vue
*** TODO [2/3] pouvoir cliquer sur agent pour info
**** DONE click => environment coordinate
**** DONE get info on agent/hacker if any
**** TODO gl_text les info
** [0/2] découvrir le monde
*** TODO mur (immuable) sont gardés sans fade
*** TODO dernière position des agents, faded 
** TODO [3/4] display info, [[affichage fps][FPS]]
*** FPS pourrait être aussi affiché dans Anttweak
*** DONE déplacer un curseur => [[Input]] ds Chuchu
*** DONE curseur actif
*** TODO curseur avec épaisseur => ligne [[line width]]
*** DONE pointer avec souris => [[Position de la souris]]
** DONE lire monde txt
** DONE afficher monde txt
** DONE faire texture hachure et point
** DONE afficher monde GL avec textures
** DONE [2/2] GLFov as dynamical VBO
*** DONE use a std::vector to store square_vts ?
*** DONE implement dynamical update [[file:src/matrix2020/gl_fovhamming.hpp]]
* [4/8] New Shaders
- test-020-window : cube en rotation
- test-021-cells : geom pour tracer cell => NON, FAIL
** DONE init of glm::mat ??
** DONE [/] cube with MVP
** make slow rotation => model
** TODO new trackball
<<trackball>>
use the one from VisuGL ?
** TODO status of GL3DObject -> usefull as hiererchy ???? or only as include ?
compare Ship and Icosphere ?
** TODO affichage fps
<<affichage fps>> est un lien/ancre préféré à 'affichage fps'
** billboard ??
** line width
** TODO [1/3] dans 3d/texture_screen.hpp and opengltuto/Tron_tuto
<<line_boxing>>
*** DONE display texture
*** TODO use framebuffer and Tron texture, as done in example : understand Glow
*** TODO geometry_shader for line boxing
represent the line box around the line
** DONE 2D cell viewer with geometry shader
** DONE [1/1] Comprendre
*** DONE sans MVP, tracer axes avec geom
**** faire varier (x,y,z), puis w
* [5/7] Boids
** [0/2] adding Physics
*** TODO Orientation of BoidBody is not aligned to speed
*** TODO change color according to speed ?
** DONE Changer taille = 1 de DIAMETRE
** DONE Ajouter couleur
** DONE Ajoute arrow orientation*
** DONE Ajouter couleur arrow
** TODO Tester deux boucle vs boucle (disk,arrow)
** DONE [1/1] Position de la souris => position dans le modèle
*** DONE Relire le calcul matriciel des projections 3D opengl
** TODO [0/2] steering seek vers le point cliqué
*** TODO afficher un point là où on a cliqué
*** TODO steering

* [2/3] Camera <2017-07-26 mer.>
** DONE [1/1] ship to GL3DObject
*** DONE add shaders to GL3DEngine
** DONE make ship move
** TODO [0/2] attach camera
*** TODO [0/1] behind ship
**** TODO Pb when ship rotates
*** TODO in cockpit
* [3/6] Physics <2017-07-19 Wed>
** TODO [3/3] Base transformation avec rotation
*** DONE glm::rotate( q, vec3)
*** DONE glm::inverse( q )
*** DONE Show in simu
** DONE Integration : apply speed_n to compute pos_{n+1} before computing speed_{n+1}
** DONE Add drag force with given coefficient.
** 3D Forces
** DONE [1/1] Ship Controlx
*** DONE Ensure that acceleration is only applied once for every physics step
** TODO [1/3] 3D Rotation
*** DONE apply (slerp) initial rotation speed
*** TODO Express Inertia Momentum of the ship in local base.
*** TODO Why 3x3 better thah Quat for rotations ? => read article
*** Quat to 3x3 rotation matrix
*** from torque, derive new angular velocity
*** from ang_vel 3x3 => quaternion
*** apply (multply) to update rotation
** TODO Coordonnées uniforme (4D, avec 1.0 en 4 si c'est un point ?)
* [5/7] Simu <2016-12-04 Sun>
** DONE shaders
- tactiship/gl_3dvect.hpp : line3d.v.glsl, line.f.glsl
- tactiship/gl_3dship.hpp : line_tri_xyz_rgb_fade.v.glsl, line_tri_xyz_rgb_fade.f.glsl
- tactiship/trajectory.hpp : line_tri_xyz_rgb_fade.v.glsl, line_tri_xyz_rgb_fade.f.glsl
- gl_engine.
  - gl_texture : sprite
  - gl_texture_fade : sprite_fade
** DONE gl_text en 3D avec mvp matrix...
** DONE frame avec x,y,z
** DONE horizontal floor with grid
** DONE discs
** TODO vect vitesse
** TODO vecteur vitesse angulaire ?

** lien entre 2 pts
** click pour avoir info
** [1/2] Planet
<<planet>>
http://planetpixelemporium.com/tutorials.php
http://www.planetaryvisions.com/Texture_map.php?pid=32
*** DONE Dark space with Frame ?
*** TODO [3/5] Sphere
http://www.songho.ca/opengl/gl_sphere.html
**** DONE as Icosphere WireFrame
**** DONE as Icosphere Faces
Projection
http://www.rwgrayprojects.com/rbfnotes/maps/graymap2.html
http://www.rwgrayprojects.com/rbfnotes/maps/graymapa.html
*** [5/12] Better Engine
**** DONE tryout in [[file:src/tactiship/test-023-3dsmartshaders][test-023-smartshaders]]
**** TODO (need a window ?)
**** DONE glfwTime -> model mat4
**** TODO 3DFrame
**** DONE use Elements to draw lines from the same verticies using lines
**** TODO nice doc
**** TODO make 'generic' -> dir 3d, useable in test :o)
- set_uniform( color ) vs set_attrib_color() ??
- set_fade
**** ScreenRunner( window, canvas, screen )
- init
- attach callbacks
- render
**** WARNING Screen need to use a Canvas, and a Window

**** TODO change GLWindow to add callbacks (see VisuGL)
**** DONE VAO = englobe le VBO et les glEnableVertexAttrib et autre
https://stackoverflow.com/questions/8923174/opengl-vao-best-practices
void Setup() {
    glGenVertexArrays(..);
    glBindVertexArray(..);
    // now setup all your VertexAttribPointers that will be bound to this VAO
   glBindBuffer(..);
   glVertexAttribPointer(..);
   glEnableVertexAttribArray(..);
}

void Render() {
    glBindVertexArray(vao);
    // that's it, now call one of glDraw... functions
    // no need to set up vertex attrib pointers and buffers!
    glDrawXYZ(..)
}

**** TODO use newer texture shader 3D
**** TODO as Icosphere with textures
**** DONE Rotation (see [[trackball]])
* [6/6] Chuchu Model
** DONE [2/2] leaving Cell
*** DONE _arrow => prend dir de _arrow
*** DONE si mur
    nouvelle direction avec rotation horaire tant que mur existe
** DONE enter cell with rocket
** DONE Toric world
** DONE Construire monde et Cells à partir d'une description serialized
En continuant ce qui est fait pour -l_walls

** DONE Source avec période réfractaire
** DONE Décalage Chuchu
Quand on ajoute un flèche, certains Chuchu déjà engagés dans la sortie ne prennent plus le trajet qui va de centre de case en centre de case.
*** TODO flag : dir_set ?

* [5/10] Graphic
** DONE Attention, transparence pas très bien gérée (bord blanc autoure des rockets)
   Enlevé DEPT_TEST je crois
** DONE 3D Chuchu models => 1 texture par direction 
** DONE Animation texture + coord
*** Rocket
le compteur d'animation doit être avec la Rocket.
Mais, normalement, c'est pas dans le modèle... Quoique
1) ajouter un update à chaque Rocket qui gère le compteur d'animation
++++2) GLRocket maintient un compteur d'animation par Rocket => essayer de lui passer en paramètre un GLSprite::render( projection, Vec2, unsigned int spriteIndex ou (row,col)) où projection peut être mutiplié par scale fonction de l'anim. En static ou en Ptr. Modèle déclence le moment d'entrée, donc de début d'animation.
** TODO [0/1] Screen size
*** screen03 (pvp001) 1280x752
*** screen01 ()       1024x768
*** cookie 1920x1080 : 1024=>576, 1365<=768, 1280=>720, 1128<=752:1838x1080
*** TODO Taille des cellule et épaisseurs de murs
** TODO [0/3] Refactor as utils class/template/other
On parle ici d'une sorte de GLSprite
 - on lui ajoute des Textures (nb_row, nb_col)
 - pre_render => choisi program; _vbo_carre_vtx
 - set_texture
 - render avec (proj, pos, row,col) ; glm::matrix, glDraw...
*** TODO Voir post_render !!
*** TODO UPD de test-005-gl_base et utilisation GLControlers
*** TODO Refactor GLTexture pour détecter l'utilisation de 'fade'
test lorsqu'on essaie de faire le binding
 
** DONE Qui est au dessus de qui ? (transparence)
Dernier tracé => en haut, Z compte pas

** TODO 3D+Tex de Source
Les chuchu grossisent et "sautent" hors des sources, qui, comme les fusées, sont extrudées du sol et donc vue en perspectives.
** TODO Tex des damiers
** TODO Tex des autres fusées
** Animation de la Cross (scale)
Cross qui devient pâle sur fusée ou flèches autre ??
** DONE Title Frame
*** largeur 512 + 128 = 640
*** hauteur 256 + 128 + 64 + 32 = 480
* [3/3] Input
** DONE Joystick controler avec GLFW
** DONE <<<BUG>>> pose flèche hors zone ???
Maintenant qu'on a un GL_Controler, la pose de flèche alors que le 
cursor est hors zone => SegFault
** Lien pour savoir où on a cliqué avec souris.
** GL Unproject
   http://en.wikibooks.org/wiki/OpenGL_Programming/Object_selection
** DONE Boost::Options et Contoler
// Parsing command line options
#include <boost/program_options.hpp>
namespace po = boost::program_options;
// ******************************************************************* options
void setup_options(int argc, char **argv)
{
  po::options_description desc("Options");
  desc.add_options()
    ("help,h", "produce help message")
    ("nb_player,n", po::value<unsigned int>(), "nb de joueur par défaut")
    ;

  // Options en ligne de commande
  po::options_description cmdline_options;
  cmdline_options.add(desc);

  // Options qui sont 'après'
  po::positional_options_description pod;
  //pod.add( "data_file", 1);
  
  // Parse
  po::variables_map vm;
  po::store(po::command_line_parser(argc, argv).
	    options(desc).positional(pod).run(), vm);
  po::notify(vm);

  if (vm.count("help")) {
    std::cout << "Usage: " << argv[0] << " [options]" << std::endl;
      std::cout << desc << std::endl;
    exit(1);
  }

  if (vm.count("nb_player")) {
    _nb_player = vm["nb_player"].as<unsigned int>();
  }
}

>>>>>> Dans MAIN
setup_options( argc, argv );
std::cout << "__SET_CONTROLER" << std::endl;
app.set_controler( _nb_player );
* [1/3] Son
** DONE play son 31xxx ds data
** TODO Pourquoi ca marche pas sur usukun ??
** TODO Mix
*** Z=A+B−AB.
*** 2 (ou 3) streams ??
** Music
*** TODO music = 10-single-player-theme pour les PUZZLE
*** TODO music = 02-multiplayer-theme pour JEU
*** TODO effect = enter_rocket.mp3

== TactiShip ==
===============

* [7/8] Tactiship <2015-12-02 Wed> Merged into Simu
Reprendre un peu tout à partir de SpaceZombie et faire un afficheur de traces de vaisseaux (genre Tie SW et Navette :o) )
** IMPORTANT : ne pas hésiter à s'inspirer de ChuchuRocket => même rép ?
** DONE Passer sous WAF
** DONE C++ 11
** DONE Reprendre Trackball
** DONE [2/2] Reprendre Axe 3D
*** DONE un GL_Screen avec axe et flèches 3D. Comme SZ.
*** DONE [1/1] Position en 3D : translation + rotation
**** DONE glMath ??
** DONE [1/1] Afficher simple vaisseau
*** DONE [Pk] les Z du vaisseaux ne sont pas les bons ?
** [3/3] TODO Afficher vaisseau qui fait un rond autour de Oz
*** DONE Afficher en plusieurs Pose
*** DONE Scale du Vaisseau
*** DONE Template pour différents objets => concept GLObject ??
** DONE [2/2] Afficher la trace de ce vaisseau
*** DONE Sous forme d'une ligne avec, de temps à autre une silhouette "fadée".
*** DONE Ruban transparent de dessous (culling)
*** Ruban avec deux couleur (clair haut, sombre dessous)
https://en.wikibooks.org/wiki/GLSL_Programming/GLUT/Two-Sided_Surfaces
** DONE Rotation avec quaternions
http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/

Quaternion QuatAroundX = Quaternion( Vector3(1.0,0.0,0.0), EulerAngle.x );
Quaternion QuatAroundY = Quaternion( Vector3(0.0,1.0,0.0), EulerAngle.y );
Quaternion QuatAroundZ = Quaternion( Vector3(0.0,0.0,1.0), EulerAngle.z );
Quaternion finalOrientation = QuatAroundX * QuatAroundY * QuatAroundZ;

The concept of quaternion multiplication is similar to matrix multiplication, it is neither dot nor cross product. If you want to understand the usage of quaternions, then get used to matrices and understand axis-angles, their basic concept is pretty similar to quaternions, the math is a bit more advanced, but once you understood axis-angles, then quaternions are not far away anymore.

Hamilton product => implémenté par operator*

For two elements a1 + b1i + c1j + d1k and a2 + b2i + c2j + d2k, their product, called the Hamilton product (a1 + b1i + c1j + d1k) (a2 + b2i + c2j + d2k), is determined by the products of the basis elements and the distributive law. The distributive law makes it possible to expand the product so that it is a sum of products of basis elements. This gives the following expression:

    a_{1}a_{2}+a_{1}b_{2}i+a_{1}c_{2}j+a_{1}d_{2}k
    {}+b_{1}a_{2}i+b_{1}b_{2}i^{2}+b_{1}c_{2}ij+b_{1}d_{2}ik
    {}+c_{1}a_{2}j+c_{1}b_{2}ji+c_{1}c_{2}j^{2}+c_{1}d_{2}jk
    {}+d_{1}a_{2}k+d_{1}b_{2}ki+d_{1}c_{2}kj+d_{1}d_{2}k^{2}.

Now the basis elements can be multiplied using the rules given above to get:[6]

    a_{1}a_{2}-b_{1}b_{2}-c_{1}c_{2}-d_{1}d_{2}
    {}+(a_{1}b_{2}+b_{1}a_{2}+c_{1}d_{2}-d_{1}c_{2})i
    {}+(a_{1}c_{2}-b_{1}d_{2}+c_{1}a_{2}+d_{1}b_{2})j
    {}+(a_{1}d_{2}+b_{1}c_{2}-c_{1}b_{2}+d_{1}a_{2})k.

The product of two rotation quaternions will be equivalent to the rotation a1 + b1i + c1j + d1k followed by the rotation a2 + b2i + c2j + d2k.

*** Static
*** Dynamic
** TODO Charger Tie Fighter 3D model ??
* ORG
** Link [[link][display
*** file:rel_path::NNN or ::search words
*** C-c l : store link
*** C-c C-o : follow link
*** C-c C-l : edit link/insert link
** TODO
*** C-c / t : sparse todo tree
   
